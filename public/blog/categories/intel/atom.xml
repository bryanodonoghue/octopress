<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Intel | A weblog by Bryan]]></title>
  <link href="http://www.nexus-software.ie/blog/categories/intel/atom.xml" rel="self"/>
  <link href="http://www.nexus-software.ie/"/>
  <updated>2017-06-07T20:33:48+01:00</updated>
  <id>http://www.nexus-software.ie/</id>
  <author>
    <name><![CDATA[Bryan O'Donoghue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screaming Fast GPIO With Intel Galileo]]></title>
    <link href="http://www.nexus-software.ie/blog/2017/06/05/screaming-fast-gpio-with-intel-galileo/"/>
    <updated>2017-06-05T09:37:45+01:00</updated>
    <id>http://www.nexus-software.ie/blog/2017/06/05/screaming-fast-gpio-with-intel-galileo</id>
    <content type="html"><![CDATA[<p><img src="images/galileo.jpg"></p>

<h1>Foreword</h1>

<p><em>Intel Galileo and the Quark X1000 SoC that power the Galileo, are projects on
which I was the leading Linux engineer. One problem we had when getting the SoC
up-and running as an Arduino host - was that the GPIOs didn&rsquo;t provide the set of
functionality that the Arudino base-libraries provided. For that reason a
<a href="http://www.cypress.com/file/37971/download">Cypress CY8C9520A I2C GPIO expander</a>
was added. The Cypress though is an I2C based device and correspondingly has
pretty disappointing GPIO performance - in comparsion to the base Arduino which
was able to toggle GPIOs in the MegaHertz range - we were achieving the hundreds
of KiloHertz.</em></p>

<p><em>Here is a post I made on the various different ways of driving GPIO on the
Galileo subsequent to the original release of the project in 2013.</em></p>

<h1>Screaming fast GPIO on Intel Galileo</h1>

<p>Galileo - has two pins IO2 and IO3 through which we can drive significant data rates.
By default these two pins are routed to the <a
href="http://www.cypress.com/file/37971/download">Cypress</a>.</p>

<p>There are three methods to communicate with these pins - which have increasing throughput</p>

<h2>digitalWrite()</h2>

<p>digitalWrite(register uint8_t pin, register uint8_t val)</p>

<p>Using this method it is possible to toggle an individual pin in a tight loop @ about 477 kHz
<code>C
    pinMode(2, OUTPUT_FAST);
    pinMode(3, OUTPUT_FAST);
    digitalWrite(2, 1);
    digitalWrite(2, 0);
</code>
This is a read-modify-write operation meaning we first read the value of the
GPIO, then we modify the value, then we write the new value back.</p>

<p>This method isn&rsquo;t especially fast since we are ultimately going through GPIOLib
in user-space - which involves a context switch to kernel and back in order to
toggle a GPIO.</p>

<h3>Example digitalWrite() outputs 477kHz waveform on IO2:</h3>

<pre><code class="C">    setup(){
        pinMode(2, OUTPUT_FAST);
    }

    loop() {
        register int x = 0;

        while(1){
            digitalWrite(2, x);
            x =!x;
        }
    }
</code></pre>

<h2>fastGpioDigitalWrite()</h2>

<p>fastGpioDigitalWrite(register uint8_t gpio, register uint8_t val)</p>

<p>This function actually lets you write directly to the registers - without going
through the code around digitalWrite() and consequently has better performance
than a straight digitalWrite(). Unlike digitalWrite() we won&rsquo;t context-switch
when updating the register associated with the GPIO. Only GPIO 2 and GPIO 3 are
supported using this method.</p>

<p>Using this method it is possible to toggle an individual pin (GPIO_FAST_IO2,
GPIO_FAST_IO3) at about 680 kHz.
<code>C
    pinMode(2, OUTPUT_FAST);
    pinMode(3, OUTPUT_FAST);
    fastGpioDigitalWrite(GPIO_FAST_IO2, 1);
    fastGpioDigitalWrite(GPIO_FAST_IO3, 0);
</code>
Again this uses read/modify/write - and can toggle one GPIO at a time</p>

<h3>Example fastGpioDigitalWrite - outputs 683kHz waveform on IO3:</h3>

<pre><code class="C">setup(){
    pinMode(3, OUTPUT_FAST);
}

loop() {

    register int x = 0;

    while(1){
        fastGpioDigitalWrite(GPIO_FAST_IO3, x);
        x =!x;
    }
}
</code></pre>

<h2>fastGpioDigitalWriteDestructive()</h2>

<p>fastGpioDigitalWriteDestructive(register uint8_t gpio_mask)</p>

<p>Using this method it is possible to achieve 2.93 Mhz data toggle rate on IO2/IO3 individually or simultaneously
<code>C
    pinMode(2, OUTPUT_FAST);
    pinMode(3, OUTPUT_FAST);
</code></p>

<p>It is the responsibility of the application to maintain the state of the GPIO
registers directly. To enable this a function called fastGpioDigitalLatch() is
provided - which allows the calling logic to latch the initial state of the
GPIOs - before updating later. This method just writes GPIO bits straight to the
GPIO register - i.e. a destructive write - for this reason it is approximately 2
x faster then read/modify/write. Twice as fast for a given write - means four
times faster for a given wave form - hence ~700kHz (680kHz) becomes ~2.8Mhz
(2.93 MHz)</p>

<h3>Example fastGpioDigitalWriteDestructive outputs 2.93MHz waveform on IO3:</h3>

<pre><code class="C">uint32_t latchValue;

setup(){

    pinMode(3, OUTPUT_FAST);
    latchValue = fastGpioDigitalLatch();

}

loop() {

    while(1){
        fastGpioDigitalWriteDestructive(latchValue);
        latchValue ^= GPIO_FAST_IO3;
    }

}
</code></pre>

<h3>Example-4 fastGpioDigitalWriteDestructive outputs 2.93MHz waveform on both IO2 and IO3:</h3>

<pre><code class="C">uint32_t latchValue;

setup(){
    pinMode(2, OUPUT_FASTMODE);
    pinMode(3, OUPUT_FASTMODE);

    latchValue = fastGpioDigitalLatch(); // latch initial state

}

loop() {

    while(1) {

        fastGpioDigitalWriteDestructive(latchValue);
        if(latchValue &amp; GPIO_FAST_IO3){

            latchValue |= GPIO_FAST_IO2;
            latchValue &amp;= ~ GPIO_FAST_IO3;

        }else{
            latchValue |= GPIO_FAST_IO3;
            latchValue &amp;= GPIO_FAST_IO2;

        }
    }
}
</code></pre>

<p>In other words the responsibility lies with the application designer in cases 3
and 4 to ensure the GPIO register values are correct - assuming - these values
matter to the application use-case.</p>
]]></content>
  </entry>
  
</feed>
